#include<bits/stdc++.h>
using namespace std;

class node{
    public:
      int data;
      node* left;
      node* right;
    node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }  
};

node* buildTree(){
    
    cout<<"Enter the data"<<endl;
    int data;
    cin>>data;
    
    if(data == -1){
        return NULL;
    }
    
    node* root = new node(data);
    
    cout<<"Enter the data for the left of "<<data<<endl;
    root->left = buildTree();
    
    cout<<"Enter the data for the right of "<<data<<endl;
    root->right = buildTree();
    
    return root;
}

void levelOrderTraversal(node* root){
    
    queue<node*>q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
       node* temp = q.front();
       q.pop();
       
       if(temp == NULL){
           cout<<endl;
           if(!q.empty()){
               q.push(NULL);
           }
       }
       else{
           cout<<temp->data<<endl;
           if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
       }
    }
}

int maxsum(node* root){
    if(root == NULL){
        return 0;
    }
    int curr=root->data;
    int maxi;
    
    int l = curr + maxsum(root -> left);
    int r = curr + maxsum(root -> right);
    
    maxi = max(l,r);
    return maxi;
    
}

int main() {
    // Write C++ code here
    node* root =  buildTree();
    levelOrderTraversal( root);

    return 0;
}
